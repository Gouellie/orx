/**
 * @file orxExtensions.h
 * !! This file is automatically generated by init, do not modify manually. !!
 * @date [date]
 */

#ifndef _orxEXTENSIONS_H_
#define _orxEXTENSIONS_H_
[+nuklear

#define orxNUKLEAR_IMPL
#include "orxNuklear.h"
#undef orxNUKLEAR_IMPL]
[+imgui

#define orxIMGUI_IMPL
#include "orxImGui.h"
#undef orxIMGUI_IMPL]
[+bundle

#define orxBUNDLE_IMPL
#include "orxBundle.h"
#undef orxBUNDLE_IMPL]
[+cheat

#define orxCHEAT_IMPL
#include "orxCheat.h"
#undef orxCHEAT_IMPL]
[+remote

#define orxREMOTE_IMPL
#include "orxRemote.h"
#undef orxREMOTE_IMPL]
[+movie

#define orxMOVIE_IMPL
#include "orxMovie.h"
#undef orxMOVIE_IMPL]
[+mod

#define orxMOD_IMPL
#include "orxMod.h"
#undef orxMOD_IMPL]
[+sndh

#define orxSNDH_IMPL
#include "orxSndh.h"
#undef orxSNDH_IMPL]

void orxFASTCALL UpdateExtensions(const orxCLOCK_INFO *_pstClockInfo)
{
[+nuklear
  // Show a small Nuklear demo
  if(nk_begin(&sstNuklear.stContext, "Demo", nk_rect(50, 50, 200, 200), NK_WINDOW_BORDER | NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE | NK_WINDOW_MINIMIZABLE | NK_WINDOW_TITLE))
  {
    enum {EASY, HARD};
    static orxS32 Op = EASY;
    static orxS32 Property = 20;

    nk_layout_row_static(&sstNuklear.stContext, 30, 80, 1);
    if (nk_button_label(&sstNuklear.stContext, "button"))
    {
      orxLOG("Nuklear button pressed.");
    }
    nk_layout_row_dynamic(&sstNuklear.stContext, 30, 2);
    if(nk_option_label(&sstNuklear.stContext, "easy", Op == EASY))
    {
      Op = EASY;
    }
    if(nk_option_label(&sstNuklear.stContext, "hard", Op == HARD))
    {
      Op = HARD;
    }
    nk_layout_row_dynamic(&sstNuklear.stContext, 25, 1);
    nk_property_int(&sstNuklear.stContext, "Compression:", 0, (int *)&Property, 100, 10, 1);
  }
  nk_end(&sstNuklear.stContext);
]
[+imgui
  // Show Dear ImGui's demo and stats windows
  ImGui::ShowDemoWindow();
  ImGui::ShowMetricsWindow();
]
}

void InitExtensions()
{
[+cheat
  // Initialize cheat support
  orxCheat_Init();
]
[+movie
  // Initialize movie support
  orxMovie_Init();
]
[+mod
  // Initialize MOD support
  orxMod_Init();
]
[+sndh
  // Initialize SNDH support
  orxSndh_Init();
]
[+nuklear
  // Initialize Dear ImGui
  orxNuklear_Init();
]
[+imgui
  // Initialize Dear ImGui
  orxImGui_Init();
]
}

void ExitExtensions()
{
[+cheat
  // Exit from cheat support
  orxCheat_Exit();
]
[+movie
  // Exit from movie support
  orxMovie_Exit();
]
[+mod
  // Exit from MOD support
  orxMod_Exit();
]
[+sndh
  // Exit from SNDH support
  orxSndh_Exit();
]
[+nuklear
  // Exit from Nuklear
  orxNuklear_Exit();
]
[+imgui
  // Exit from Dear ImGui
  orxImGui_Exit();
]
[+remote
  // Exit from remote support
  orxRemote_Exit();
]
[+bundle
  // Exit from bundle support
  orxBundle_Exit();
]
}

void BootstrapExtensions()
{
[+bundle
  // Initialize bundle resource type
  orxBundle_Init();
]
[+remote
  // Initialize remote (HTTP) resource type
  orxRemote_Init();
]
  // Add config storage to find the initial config file
[+bundle
  orxResource_AddStorage(orxCONFIG_KZ_RESOURCE_GROUP, orxBUNDLE_KZ_RESOURCE_STORAGE, orxFALSE);
  orxResource_AddStorage(orxCONFIG_KZ_RESOURCE_GROUP, orxBUNDLE_KZ_RESOURCE_STORAGE "[name].obr", orxFALSE);]
  orxResource_AddStorage(orxCONFIG_KZ_RESOURCE_GROUP, "../data/config", orxFALSE);
}

#endif // _orxEXTENSIONS_H_
